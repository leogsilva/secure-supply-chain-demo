name: Publish Releases to Hub

# When its time to do a release do a full cross platform build for all supported
# architectures and push all of them to Docker Hub.
# Only trigger on semver shaped tags.
on:
  push:
    tags:
      - "v*.*.*"

jobs:
  docker:
    runs-on: ubuntu-latest

    # https://docs.github.com/en/actions/reference/authentication-in-a-workflow
    permissions:
      id-token: write  # undocumented OIDC support.
      packages: write
      contents: read
      
    steps:
      # GitHub Actions do not automatically checkout your projects. If you need the code
      # you need to check it out.
      - name: Checkout
        uses: actions/checkout@v2

      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=leogsilva/docker-action-examples
          VERSION=edge
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          RELEASE="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=release::${RELEASE}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERIO_USERNAME }}
          password: ${{ secrets.DOCKERIO_PASSWORD }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./app
          file: ./app/Dockerfile
          target: prod
          platforms: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: install cosign private key
        run: 'echo "$COSIGN_KEY" > github.key'
        shell: bash
        env:
          COSIGN_KEY: ${{secrets.COSIGN_KEY}}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}

      - name: Use SBOM
        uses: anchore/sbom-action/download-syft@v0.11.0
      - name: Generate SBOM
        run: |
          syft packages ${{ steps.prep.outputs.release }} --scope all-layers -o json > sbom.json
      # - name: Upload SBOM to assets
      #   uses: anchore/sbom-action/publish-sbom@v0.2.0
      #   with:
      #     sbom-artifact-match: ".*\\.spdx$"
      #     github_token: ${{ secrets.TOKEN }}
      - name: Cosign installer
        uses: sigstore/cosign-installer@main
      - name: Run cosign
        run: echo -n "${{secrets.COSIGN_PASSWORD}}" | cosign sign -a git_sha=$GITHUB_SHA -key github.key -r ${{ steps.prep.outputs.release }}

      - name: Attest SBOM
        run: |
          echo -n "${{secrets.COSIGN_PASSWORD}}" | cosign attest -key github.key -predicate sbom.json ${{ steps.prep.outputs.release }}

      - name: Github Action for curl
        run: |
          curl -X POST -i -H "Authorization: Bearer ${{ secrets.JIRA_SERVICE_TOKEN }}" -d '{"requestType": "new_signature", "image": "${{ steps.prep.outputs.release }}", "projectId": "${{ secrets.JIRA_PROJECT }}", "pipeline": "1"}' https://wsqtoqt4v1.execute-api.us-east-1.amazonaws.com/dev/jira-service
